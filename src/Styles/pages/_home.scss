@use "sass:math" as *;

.main--home {
	display: grid;
	place-content: center;
}

// clip-path: polygon(50% 0, 100% 65%, 51% 100%, 0 66%);

.dice {
	display: grid;
	grid-auto-rows: 1fr;

	transform-style: preserve-3d;
	transform: rotateY(32deg) rotateX(40deg);

	&__row {
		display: grid;
		transform-style: preserve-3d;

		--t-y: 40px;

		transform: rotateY(32deg) translateY(var(--t-y));

		&:last-child {
			transform: rotate(180deg) translateY(var(--t-y));
		}
	}

	&__face {
		display: grid;
		place-items: center;
		grid-column: 1/2;
		grid-row: 1/2;

		// 4 - 3
		// 8 - x
		// 8*3/4

		$size: 4;
		$ratio: round(div($size * 4, 3));
		width: $size + rem;
		height: $ratio + rem;

		transform-style: preserve-3d;
		// transform: perspective(1000px) rotate(45deg, 45deg);
		$inline: 20%;

		clip-path: polygon(50% 0, (100 - $inline) 65%, 50% 100%, $inline 65%);

		background-color: lightblue;
		color: black;

		// opacity: 0.4;

		--r-x: 39deg;
		--r-z: #{$size * 0.5}rem;
		--scale: 1;

		@for $i from 1 through 6 {
			$max: 360;
			$div: div($max, 6);
			$back: div($ratio, $i) * 16;
			$bRound: round($back);

			// @debug $div;
			&:nth-child(#{$i + 1}) {
				transform: perspective(100rem)
					scale(var(--scale))
					rotateY(#{$i * $div}deg)
					rotateX(var(--r-x))
					translateZ(var(--r-z));
				// background-color: hsl(div($max, $i * 0.5), 100%, 50%);
			}
		}

		&:first-child {
			transform: perspective(100rem) scale(var(--scale)) rotateY(0deg) rotateX(var(--r-x)) translateZ(var(--r-z));
		}
	}
}
